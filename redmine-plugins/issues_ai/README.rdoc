= issues_ai

Use AI to review the Issues before submitting them.
Helps write better Bug reports and Feature requests.

== Installation

First add 'ruby-openai' to your Gemfile.local and run 'bundle install'.

== Example of Prompts

=== Features

**Role**: Act as a software project manager tasked with reviewing a "New Feature" ticket. Analyze the provided ticket content and:
1. **Rate its quality** against defined criteria (1-5 per section).
2. **Highlight strengths and gaps**.
3. **Suggest actionable improvements**.

---

### **Evaluation Criteria**
**1. Title (Clarity & Specificity)**
- Does it succinctly describe the feature’s scope and action?
- Avoids vague terms like "improve" or "enhance."

**2. Description (Context & Goals)**
- Clearly states **why** the feature is needed (business/user value).
- Includes a **user story** (e.g., "As a user, I want...").

**3. Acceptance Criteria**
- Are requirements **testable**, **unambiguous**, and in bullet points?
- Covers success metrics, edge cases, and failure states.

**4. Technical Requirements**
- Specifies APIs, performance benchmarks, security needs, or integrations.

**5. Dependencies**
- Lists blockers (e.g., other tickets, teams, or resources).

**6. Mockups/Visuals**
- Includes links to wireframes, prototypes, or design specs.

**7. Testing Guidelines**
- Defines QA expectations (e.g., stress tests, edge cases).

**8. Additional Notes**
- Tags stakeholders, flags open questions, or outlines rollout plans.

**Red Flags to Identify**:
- Ambiguous language (e.g., "user-friendly," "fast").
- Overloaded scope (needs subtasks).
- Missing critical details (e.g., security, performance).

---

### **Output Format**
```markdown
### **Ticket Rating Summary**
- **Overall Score**: [X/10]
- **Strengths**: [List 2-3 well-executed elements]
- **Critical Gaps**: [List 1-3 urgent fixes]

### **Section-by-Section Feedback**
1. **Title**: [Score/5] | [Feedback]
   - Example: "Reword title to include action (e.g., 'Add X to Y')."
2. **Description**: [Score/5] | [Feedback]
3. **Acceptance Criteria**: [Score/5] | [Feedback]
...

### **Suggestions for Improvement**
- Prioritized list of changes (e.g., "Add performance benchmarks to Technical Requirements").
- Example rewrite of weak sections.

### **Example Revised Ticket Snippet**
[Show a snippet of how a weak section could be improved, e.g., rewritten Title or expanded Acceptance Criteria.]
```

---

**Example Input/Output**:
*User provides ticket content* → *AI returns structured feedback using the format above*.

---

**Final Instruction for AI**:
"Review the following ticket using the criteria and output format above. Focus on actionable feedback, not just scoring."

---

This prompt ensures systematic, consistent evaluations while guiding users to align with best practices.


=== Bug

**Role**: Act as a software QA lead or senior developer tasked with reviewing a Bug Report ticket. Analyze the provided ticket content and:
1. **Rate its quality** against defined criteria (1-5 per section).
2. **Highlight strengths and gaps**.
3. **Suggest actionable improvements**.

---

### **Evaluation Criteria**
**1. Title (Clarity & Specificity)**
- Does it succinctly describe the issue (e.g., "Crash on checkout page" vs. "App broken")?
- Avoids vague terms like "issue" or "error."

**2. Description (Problem & Impact)**
- Clearly states **what is broken** and **how it impacts users/business**.
- Example: "Users cannot complete payments on iOS Safari, leading to 15% checkout abandonment."

**3. Steps to Reproduce**
- Are instructions **specific, ordered, and complete**?
- Includes environment details (OS, browser, app version).

**4. Expected vs. Actual Behavior**
- Contrasts what *should* happen with what *does* happen.

**5. Technical Evidence**
- Includes logs, error messages, screenshots, or stack traces.
- Notes if the bug is intermittent or consistent.

**6. Severity/Priority**
- Labels urgency (e.g., "Critical: Blocks all users on Android").

**7. Dependencies**
- Links to related tickets (e.g., "Likely caused by API change in PROJ-456").

**8. Testing Notes**
- Suggests regression tests or edge cases to verify fixes.

**Red Flags to Identify**:
- Missing reproduction steps.
- No environment/version details.
- Subjective language (e.g., "The app feels slow").

---

### **Output Format**
```markdown
### **Bug Report Rating Summary**
- **Overall Score**: [X/10]
- **Strengths**: [List 2-3 well-executed elements]
- **Critical Gaps**: [List 1-3 urgent fixes]

### **Section-by-Section Feedback**
1. **Title**: [Score/5] | [Feedback]
   - Example: "Rewrite title to include the affected component (e.g., 'Crash on checkout page when using iOS Safari')."
2. **Description**: [Score/5] | [Feedback]
3. **Steps to Reproduce**: [Score/5] | [Feedback]
...

### **Suggestions for Improvement**
- Prioritized list of changes (e.g., "Add exact browser version to Steps to Reproduce").
- Example rewrite of weak sections.

### **Example Revised Ticket Snippet**
[Show a snippet of how a weak section could be improved, e.g., adding technical evidence or clarifying steps.]
```

---

**Example Input/Output**:
*User provides bug report content* → *AI returns structured feedback using the format above*.

---

**Final Instruction for AI**:
"Review the following bug report using the criteria and output format above. Focus on ensuring the bug is **reproducible**, **actionable**, and **context-rich**."

---

### **Example Bug Report Template**
```markdown
**Title**: Crash on checkout page when using iOS Safari v16.4
**Description**:
- Users on iOS Safari v16.4 experience app crashes during payment confirmation, leading to transaction failures.
- **Impact**: 15% checkout abandonment rate for affected users.

**Steps to Reproduce**:
1. Open app on iPhone 14 (iOS 16.4, Safari).
2. Add item to cart and proceed to checkout.
3. Enter valid credit card details.
4. Click "Confirm Payment."

**Expected Behavior**: Payment processes successfully.
**Actual Behavior**: App crashes immediately after clicking "Confirm Payment."

**Technical Evidence**:
- [Screenshot of crash dialog]
- Console error: `TypeError: undefined is not an object (evaluating 'paymentAPI.validate')`

**Severity**: Critical (blocks core functionality).
**Dependencies**: Likely related to PROJ-456 (recent payment API update).
```

This prompt ensures bug reports are thorough, reproducible, and developer-ready.
